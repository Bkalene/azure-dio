# -*- coding: utf-8 -*-
"""Tradutor de artigos com AzureAI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KTtVccHKSQV8Wem3Y4mD6_PSUQe5SSTF
"""

!pip install requests python-docx

from typing_extensions import ParamSpec
import requests
from docx import Document
import os
import uuid

subscription_key = "4Z8NOW3P5T3XByamIDY5JWng7nGr0GQPKm9G6KprCdXN6fjtbVwyJQQJ99AKACHYHv6XJ3w3AAABACOGebsb"
endpoint = 'https://api.cognitive.microsofttranslator.com'
location = "eastus2"
language_destination = "pt-br"

def translator_text(text, target_language):
  path = '/translate'
  constructed_url = endpoint + path
  headers = {
      'Ocp-Apim-Subscription-Key': subscription_key,
      'Ocp-Apim-subscription-Region': location,
      'Content-type': 'application/json',
      'X-ClientTraceId': str(os.urandom(16))
  }

  body = [{
      'text': text
  }]
  params = {
      'api-version': '3.0',
      'from': 'en',
      'to': target_language
  }
  request = requests.post(constructed_url, params=params, headers=headers, json=body)
  response = request.json()
  return response[0]["translations"][0]["text"]

from typing_extensions import ParamSpec
import requests
from docx import Document
import os
import uuid

subscription_key = "3i2Hp1mFc1SXVo3T9phL6s34hnMiqITFVMRlJHdjeUkjUe41y0u7JQQJ99AKACHYHv6XJ3w3AAABACOGB2TN"
endpoint = 'https://oai-dio-bootcamp-dev-eastus-001-brisa.openai.azure.com/'
location = 'eastus2'
language_destination = "pt-br"

def translator_text(text, target_language):
    path = '/translate'
    constructed_url = endpoint + path
    headers = {
        'Ocp-Apim-Subscription-Key': subscription_key,
        'Ocp-Apim-subscription-Region': location,
        'Content-type': 'application/json',
        'X-ClientTraceId': str(uuid.uuid4()) # Alterado os.urandom(16) para uuid.uuid4() para gerar um UUID
    }

    body = [{
        'text': text
    }]
    params = {
        'api-version': '3.0',
        'from': 'en',
        'to': target_language
    }
    request = requests.post(constructed_url, params=params, headers=headers, json=body)
    response = request.json()

    # Verifica se a resposta contém um erro
    if "error" in response:
        print(f"Erro: {response['error']}")
        return None
    # Verifica se a estrutura esperada existe antes de acessá-la
    elif response and isinstance(response, list) and response[0].get("translations"):
        return response[0]["translations"][0]["text"]
    else:
        print(f"Formato de resposta inesperado: {response}")
        return None

translator_text("I know youre somewhere out there, somewhere far away", language_destination)

def translated_document(path):
    document = Document(path)
    full_text = []
    for paragraph in document.paragraphs:
      translated_text = translator_text(paragraph.text, language_destination)
      full_text.append(translator_text)

    translated_doc = Document()
    for line in full_text:
      translated_doc.add_paragraph(line)

    path_translated = path.replace(".docx", f"_{language_destination}.docx")
    translated_doc.save(path_translated)
    return path_translated

input_file = "/content/MUSICA.docx"
translated_document(input_file)